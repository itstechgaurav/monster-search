{"version":3,"sources":["logo.svg","components/card-lists/card-list.jsx","components/search-field/search-field.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","CardList","props","className","monsters","map","monster","key","id","alt","name","src","dangerouslySetInnerHTML","__html","preetyName","email","SearchField","placeholder","handler","type","onChange","App","handleChanges","e","setState","searchString","target","value","trim","filterMylist","state","filteredList","fetch","fetchResult","json","users","forEach","it","this","length","filteredResult","filter","res","toLowerCase","indexOf","finalResult","slice","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wKAAAA,EAAOC,QAAU,IAA0B,kC,yLCI9BC,G,kBAAY,SAACC,GACtB,OACI,yBAAKC,UAAU,SAEPD,EAAME,SAASC,KAAI,SAAAC,GAAO,OACtB,yBAAKH,UAAU,OAAOI,IAAKD,EAAQE,IAC/B,yBAAKL,UAAU,WAAWM,IAAKH,EAAQI,KAAMC,IAAG,+BAA0BL,EAAQE,GAAlC,mBAChD,wBAAIL,UAAU,aAAaS,wBAAyB,CAACC,OAAQP,EAAQQ,cACrE,uBAAGX,UAAU,cAAeG,EAAQS,cCR/CC,G,MAAc,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,QACvC,OACI,2BAAOC,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCwElDG,E,kDApEb,aAAe,IAAD,8BAEZ,gBAoCFC,cAAgB,SAAAC,GACd,EAAKC,SAAS,CACZC,aAAcF,EAAEG,OAAOC,MAAMC,QAC5B,EAAKC,eArCR,EAAKC,MAAQ,CACX1B,SAAU,GACV2B,aAAc,GACdN,aAAc,IAPJ,E,kMAacO,MAAM,8C,cAA1BC,E,gBACcA,EAAYC,O,QAA1BC,E,QACAC,SAAQ,SAAAC,GAAE,OAAIA,EAAGvB,WAAauB,EAAG3B,QACvC4B,KAAKd,SAAS,CAAEpB,SAAU+B,GAASG,KAAKT,c,2IAG1B,IAAD,EACsBS,KAAKR,MAAhCL,EADK,EACLA,aAAcrB,EADT,EACSA,SACtB,GAAGqB,EAAac,OAAQ,CACtB,IAAMC,EAAiBpC,EAASqC,QAAO,SAAAJ,GACrC,IAAMK,EAAML,EAAG3B,KAAKiC,cAAcC,QAAQnB,EAAakB,eACnDE,EAAcH,GAAO,EAKzB,OAFEL,EAAGvB,WADF+B,EACD,UAAmBR,EAAG3B,KAAKoC,MAAM,EAAGJ,GAApC,mCAAmEL,EAAG3B,KAAKoC,MAAMJ,EAAKjB,EAAac,OAASG,GAA5G,kBAA0HL,EAAG3B,KAAKoC,MAAMrB,EAAac,OAASG,IACzIL,EAAG3B,KACnBmC,KAETP,KAAKd,SAAS,CAAEO,aAAcS,SAE9BpC,EAASgC,SAAQ,SAAAC,GAAE,OAAIA,EAAGvB,WAAauB,EAAG3B,QAC1C4B,KAAKd,SAAS,CAAEO,aAAc3B,M,+BAWhC,OACE,yBAAKD,UAAU,OACb,wBAAIA,UAAU,YAAd,kBAGA,kBAAC,EAAD,CAAac,YAAY,SAASC,QAASoB,KAAKhB,gBAEhD,kBAAC,EAAD,CAAUlB,SAAUkC,KAAKR,MAAMC,gBAG5BO,KAAKR,MAAMC,aAAaQ,QACzB,kD,GA1DQQ,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.286f3cae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nimport './card-list.css'\r\n\r\nexport const CardList =  (props) => {\r\n    return (\r\n        <div className=\"cards\">\r\n            {\r\n                props.monsters.map(monster => (\r\n                    <div className=\"card\" key={monster.id}>\r\n                        <img className=\"card-img\" alt={monster.name} src={`https://robohash.org/${monster.id}.png?set=set2`}></img>\r\n                        <h2 className=\"card-title\" dangerouslySetInnerHTML={{__html: monster.preetyName}}></h2>\r\n                        <p className=\"card-email\">{ monster.email }</p>\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport './search-field.css'\r\n\r\nexport const SearchField = ({ placeholder, handler }) => {\r\n    return (\r\n        <input type=\"search\" placeholder={placeholder} onChange={handler}></input>\r\n    )\r\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {CardList} from './components/card-lists/card-list';\nimport {SearchField} from './components/search-field/search-field'\n\n\nclass App extends Component {\n\n  constructor() {\n\n    super();\n\n    this.state = {\n      monsters: [],\n      filteredList: [],\n      searchString: ''\n    }\n\n  }\n\n  async componentDidMount() {\n    const fetchResult = await fetch('https://jsonplaceholder.typicode.com/users');\n    const users = await fetchResult.json();\n    users.forEach(it => it.preetyName = it.name);\n    this.setState({ monsters: users }, this.filterMylist);\n  }\n\n  filterMylist() {\n    const { searchString, monsters } = this.state;\n    if(searchString.length) {\n      const filteredResult = monsters.filter(it => {\n        const res = it.name.toLowerCase().indexOf(searchString.toLowerCase());\n        let finalResult = res >= 0;\n\n        if(finalResult) {\n          it.preetyName = `${it.name.slice(0, res)}<span class='highlight'>${it.name.slice(res, searchString.length + res)}</span>${it.name.slice(searchString.length + res)}`;\n        } else it.preetyName = it.name;\n        return finalResult;\n      })\n      this.setState({ filteredList: filteredResult });\n    } else {\n      monsters.forEach(it => it.preetyName = it.name);\n      this.setState({ filteredList: monsters })\n    }\n  }\n\n  handleChanges = e => {\n    this.setState({ \n      searchString: e.target.value.trim() \n    }, this.filterMylist);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"appTitle\">\n          Monster Search\n        </h1>\n        <SearchField placeholder=\"Search\" handler={this.handleChanges}/>\n\n        <CardList monsters={this.state.filteredList}></CardList>\n\n        {\n          !this.state.filteredList.length &&\n          <h2>\n            Nothing Found\n          </h2>\n        }\n\n      </div>\n    );\n  }\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}